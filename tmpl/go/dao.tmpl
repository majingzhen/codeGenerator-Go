// Package {{.PackageName}} 自动生成模板 {{.StructName}}Dao
// @description <TODO description class purpose>
// @author {{.Author}}
// @File: {{.FileName}}
// @version 1.0.0
// @create {{.DateTime}}
package {{.PackageName}}

import (
    "{{.ImportPath}}/common"
    "{{.ImportPath}}/global"
)

// {{.StructName}}Dao 结构体

type {{.StructName}}Dao struct { }

// Create 创建{{.StructName}}记录
// Author {{.Author}}
func (dao *{{.StructName}}Dao) Create({{.ObjectName}} {{.StructName}}) (err error) {
    err = global.GOrmDao.Create(&{{.ObjectName}}).Error
    return err
}

// Delete 删除{{.StructName}}记录
// Author {{.Author}}
func (dao *{{.StructName}}Dao) Delete(id int) (err error) {
    err = global.GOrmDao.Delete(&[]{{.StructName}}{}, "id = ?", id).Error
    return err
}

// DeleteByIds 批量删除{{.StructName}}记录
// Author {{.Author}}
func (dao *{{.StructName}}Dao) DeleteByIds(ids []int) (err error) {
    err = global.GOrmDao.Delete(&[]{{.StructName}}{}, "id in ?", ids).Error
    return err
}

// Update 更新{{.StructName}}记录
// Author {{.Author}}
func (dao *{{.StructName}}Dao) Update({{.ObjectName}} {{.StructName}}) (err error) {
    err = global.GOrmDao.Save(&{{.ObjectName}}).Error
    return err
}

// Get 根据id获取{{.StructName}}记录
// Author {{.Author}}
func (dao *{{.StructName}}Dao) Get(id int) (err error, {{.ObjectName}} *{{.StructName}}) {
    err = global.GOrmDao.Where("id = ?", id).First(&{{.ObjectName}}).Error
    return
}

// Find 分页获取{{.StructName}}记录
// Author {{.Author}}
func (dao *{{.StructName}}Dao) Find(info *common.PageInfoV2) (err error, {{.ObjectName}}s *[]{{.StructName}}, total int64) {
    // 创建db
    db := global.GOrmDao.Model(&{{.StructName}}{})
    // 如果有条件搜索 下方会自动创建搜索语句
    //if info.Id != "" {
    //	db = db.Where("ID = ?", info.Id)
    //}

    err = db.Count(&total).Error
    if err != nil {
        return
    }
    var tmp []{{.StructName}}
    err = db.Limit(info.Limit).Offset(info.Offset).Find(&tmp).Error
    {{.ObjectName}}s = &tmp
    return err, {{.ObjectName}}s, total
}