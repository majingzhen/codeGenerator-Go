// Package {{.PackageName}}  {{.StructName}}Api 自动生成模板
// @description <TODO description class purpose>
// @author {{.Author}}
// @File: {{.FileName}}
// @version 1.0.0
// @create {{.DateTime}}
package {{.PackageName}}
    
import (
    "github.com/gin-gonic/gin"
    "go.uber.org/zap"
    "{{.ImportPath}}/{{.CodePath}}/{{.ModuleName}}/{{.FileName}}/service"
    "{{.ImportPath}}/{{.CodePath}}/{{.ModuleName}}/{{.FileName}}/service/view"
    "{{.ImportPath}}/common"
    response "{{.ImportPath}}/common/response"
    "{{.ImportPath}}/global"
    "{{.ImportPath}}/utils"
    "strings"
)

type {{.StructName}}Api struct {
}

var {{.ObjectName}}Service = service.{{.StructName}}ServiceApp

// Create 创建{{.StructName}}
// @Summary 创建{{.StructName}}
// @Router /{{.ObjectName}}/create [post]
func (api *{{.StructName}}Api) Create(c *gin.Context) {
    var {{.ObjectName}}View view.{{.StructName}}View
    _ = c.ShouldBindJSON(&{{.ObjectName}}View)
    {{.ObjectName}}View.Id = utils.GenUID()
    {{.ObjectName}}View.CreateTime = utils.GetCurTimeStr()
    {{.ObjectName}}View.UpdateTime = utils.GetCurTimeStr()
    {{.ObjectName}}View.CreateBy = framework.GetLoginUserName(c)
    if err := {{.ObjectName}}Service.Create(&{{.ObjectName}}View); err != nil {
    global.Logger.Error("创建失败!", zap.Error(err))
    response.FailWithMessage("创建失败", c)
    } else {
    response.OkWithMessage("创建成功", c)
    }
}

// Delete 删除{{.StructName}}
// @Summary 删除{{.StructName}}
// @Router /{{.ObjectName}}/delete [delete]
func (api *{{.StructName}}Api) Delete(c *gin.Context) {
    idStr := c.Param("ids")
    ids := strings.Split(idStr, ",")
    if err := {{.ObjectName}}Service.DeleteByIds(ids); err != nil {
        global.Logger.Error("删除失败!", zap.Error(err))
        response.FailWithMessage("删除失败", c)
    } else {
        response.OkWithMessage("删除成功", c)
    }
}

// Update 更新{{.StructName}}
// @Summary 更新{{.StructName}}
// @Router /{{.ObjectName}}/update [put]
func (api *{{.StructName}}Api) Update(c *gin.Context) {
    var {{.ObjectName}}View view.{{.StructName}}View
    _ = c.ShouldBindJSON(&{{.ObjectName}}View)
    id := {{.ObjectName}}View.Id
    if id == "" {
        response.FailWithMessage("更新失败", c)
    }
    {{.ObjectName}}View.UpdateTime = utils.GetCurTimeStr()
    {{.ObjectName}}View.UpdateBy = framework.GetLoginUserName(c)
    if err := {{.ObjectName}}Service.Update(id, &{{.ObjectName}}View); err != nil {
    global.Logger.Error("更新持久化失败!", zap.Error(err))
        response.FailWithMessage("更新失败", c)
    } else {
        response.OkWithMessage("更新成功", c)
    }
}

// Get 用id查询{{.StructName}}
// @Summary 用id查询{{.StructName}}
// @Router /{{.ObjectName}}/get [get]
func (api *{{.StructName}}Api) Get(c *gin.Context) {
    id := c.Param("id")
    if err, {{.ObjectName}}View := {{.ObjectName}}Service.Get(id); err != nil {
        global.Logger.Error("查询失败!", zap.Error(err))
        response.FailWithMessage("查询失败", c)
    } else {
        response.OkWithData({{.ObjectName}}View, c)
    }
}

// Page 分页获取{{.StructName}}列表
// @Summary 分页获取{{.StructName}}列表
// @Router /{{.ObjectName}}/page [get]
func (api *{{.StructName}}Api) Page(c *gin.Context) {
    var pageInfo view.{{.StructName}}PageView
    // 绑定查询参数到 pageInfo
    if err := c.ShouldBindQuery(&pageInfo); err != nil {
        response.FailWithMessage("获取分页数据解析失败!", c)
    }

    if err, res := {{.ObjectName}}Service.Page(&pageInfo); err != nil {
        global.Logger.Error("获取分页信息失败!", zap.Error(err))
        response.FailWithMessage("获取失败", c)
    } else {
        response.OkWithDetailed(res, "获取成功", c)
    }
}

// List 获取{{.StructName}}列表
// @Summary 获取{{.StructName}}列表
// @Router /{{.ObjectName}}/list [get]
func (api *{{.StructName}}Api) List(c *gin.Context) {
    var view view.{{.StructName}}View
    // 绑定查询参数到 view对象
    if err := c.ShouldBindQuery(&view); err != nil {
        response.FailWithMessage("获取参数解析失败!", c)
    }
    // 判断是否需要根据用户获取数据
    // userId := framework.GetLoginUserId(c)
    if err, res := {{.ObjectName}}Service.List(&view); err != nil {
        global.Logger.Error("获取数据失败!", zap.Error(err))
        response.FailWithMessage("获取失败", c)
    } else {
        response.OkWithDetailed(res, "获取成功", c)
    }
}