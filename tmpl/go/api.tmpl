// Package {{.PackageName}}  {{.StructName}}Api 自动生成模板
// @description <TODO description class purpose>
// @author {{.Author}}
// @File: {{.FileName}}
// @version 1.0.0
// @create {{.DateTime}}
package {{.PackageName}}
    
import (
    "encoding/json"
    "github.com/gin-gonic/gin"
    "go.uber.org/zap"
    "{{.ImportPath}}/{{.CodePath}}/{{.ModuleName}}/{{.FileName}}/service"
    "{{.ImportPath}}/{{.CodePath}}/{{.ModuleName}}/{{.FileName}}/service/view"
    "{{.ImportPath}}/common"
    response "{{.ImportPath}}/common/response"
    "{{.ImportPath}}/global"
    "{{.ImportPath}}/utils"
    "strconv"
)

type {{.StructName}}Api struct {
}

var {{.ObjectName}}Service = service.{{.StructName}}ServiceApp

// Create 创建{{.StructName}}
// @Summary 创建{{.StructName}}
// @Router /{{.ObjectName}}/create [post]
func ({{.ObjectName}}Api *{{.StructName}}Api) Create(c *gin.Context) {
    var {{.ObjectName}}View view.{{.StructName}}View
    _ = c.ShouldBindJSON(&{{.ObjectName}}View)
    {{.ObjectName}}View.Id = strings.ReplaceAll(uuid.NewV4().String(), "-", "")
    {{.ObjectName}}View.CreateTime = utils.GetCurTimeStr()
    {{.ObjectName}}View.UpdateTime = utils.GetCurTimeStr()
    if err := {{.ObjectName}}Service.Create(&{{.ObjectName}}View); err != nil {
    global.Logger.Error("创建失败!", zap.Error(err))
    response.FailWithMessage("创建失败", c)
    } else {
    response.OkWithMessage("创建成功", c)
    }
}

// Delete 删除{{.StructName}}
// @Summary 删除{{.StructName}}
// @Router /{{.ObjectName}}/delete [delete]
func ({{.ObjectName}}Api *{{.StructName}}Api) Delete(c *gin.Context) {
    var id common.Id
    _ = c.ShouldBindJSON(&id)
    if err := {{.ObjectName}}Service.Delete(id.ID); err != nil {
    global.Logger.Error("删除失败!", zap.Error(err))
    response.FailWithMessage("删除失败", c)
    } else {
    response.OkWithMessage("删除成功", c)
    }
}

// DeleteByIds 批量删除{{.StructName}}
// @Summary 批量删除{{.StructName}}
// @Router /{{.ObjectName}}/deleteByIds [delete]
func ({{.ObjectName}}Api *{{.StructName}}Api) DeleteByIds(c *gin.Context) {
    var ids common.Ids
    _ = c.ShouldBindJSON(&ids)
    if err := {{.ObjectName}}Service.DeleteByIds(ids.Ids); err != nil {
    global.Logger.Error("批量删除失败!", zap.Error(err))
    response.FailWithMessage("批量删除失败", c)
    } else {
    response.OkWithMessage("批量删除成功", c)
    }
}

// Update 更新{{.StructName}}
// @Summary 更新{{.StructName}}
// @Router /{{.ObjectName}}/update [put]
func ({{.ObjectName}}Api *{{.StructName}}Api) Update(c *gin.Context) {
    var {{.ObjectName}}View view.{{.StructName}}View
    _ = c.ShouldBindJSON(&{{.ObjectName}}View)
    id := {{.ObjectName}}View.Id
    if id == "" {
        response.FailWithMessage("更新失败", c)
    }
    {{.ObjectName}}View.UpdateTime = utils.GetCurTimeStr()
    if err := {{.ObjectName}}Service.Update(id, &{{.ObjectName}}View); err != nil {
    global.Logger.Error("更新持久化失败!", zap.Error(err))
        response.FailWithMessage("更新失败", c)
    } else {
        response.OkWithMessage("更新成功", c)
    }
}

// Get 用id查询{{.StructName}}
// @Summary 用id查询{{.StructName}}
// @Router /{{.ObjectName}}/get [get]
func ({{.ObjectName}}Api *{{.StructName}}Api) Get(c *gin.Context) {
    id := c.Query("id")
    if err, {{.ObjectName}}View := {{.ObjectName}}Service.Get(id); err != nil {
        global.Logger.Error("查询失败!", zap.Error(err))
        response.FailWithMessage("查询失败", c)
    } else {
        response.OkWithData(gin.H{"{{.ObjectName}}View": {{.ObjectName}}View}, c)
    }
}

// Find 分页获取{{.StructName}}列表
// @Summary 分页获取{{.StructName}}列表
// @Router /{{.ObjectName}}/find [get]
func ({{.ObjectName}}Api *{{.StructName}}Api) Find(c *gin.Context) {
    var pageInfo common.PageInfoV2
    // 绑定查询参数到 pageInfo
    if err := c.ShouldBindQuery(&pageInfo); err != nil {
        response.FailWithMessage("获取分页数据解析失败!", c)
    }
    // 调用 Calculate 方法自动计算 Limit 和 Offset
    pageInfo.Calculate()
    if err := {{.ObjectName}}Service.Find(&pageInfo); err != nil {
        global.Logger.Error("获取分页信息失败!", zap.Error(err))
        response.FailWithMessage("获取失败", c)
    } else {
        response.OkWithDetailed(pageInfo, "获取成功", c)
    }
}