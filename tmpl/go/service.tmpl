// Package {{.PackageName}} 自动生成模板 {{.StructName}}Service
// @description <TODO description class purpose>
// @author {{.Author}}
// @File: {{.FileName}}
// @version 1.0.0
// @create {{.DateTime}}
package {{.PackageName}}

import (
    "{{.ImportPath}}/common"
    "{{.ImportPath}}/{{.CodePath}}/{{.ModuleName}}/{{.FileName}}/model"
    "{{.ImportPath}}/{{.CodePath}}/{{.ModuleName}}/{{.FileName}}/service/view"
)
var {{.ObjectName}}Dao = model.{{.StructName}}DaoApp
var viewUtils = view.{{.StructName}}ViewUtilsApp

type {{.StructName}}Service struct {}

// Create 创建{{.StructName}}记录
// Author {{.Author}}
func (service *{{.StructName}}Service) Create({{.ObjectName}}View *view.{{.StructName}}View) (err error) {
    err1, {{.ObjectName}} := viewUtils.View2Data({{.ObjectName}}View)
    if err1 != nil {
        return err1
    }
    err2 := {{.ObjectName}}Dao.Create(*{{.ObjectName}})
    if err2 != nil {
        return err2
    }
        return nil
    }

// Delete 删除{{.StructName}}记录
// Author {{.Author}}
func (service *{{.StructName}}Service) Delete(id string) (err error) {
    err = {{.ObjectName}}Dao.Delete(id)
        return err
    }

// DeleteByIds 批量删除{{.StructName}}记录
// Author {{.Author}}
func (service *{{.StructName}}Service) DeleteByIds(ids []string) (err error) {
    err = {{.ObjectName}}Dao.DeleteByIds(ids)
        return err
    }

// Update 更新{{.StructName}}记录
// Author {{.Author}}
func (service *{{.StructName}}Service) Update(id string, {{.ObjectName}}View *view.{{.StructName}}View) (err error) {
    {{.ObjectName}}View.Id = id
    err1, {{.ObjectName}} := viewUtils.View2Data({{.ObjectName}}View)
    if err1 != nil {
        return err1
    }
    err = {{.ObjectName}}Dao.Update(*{{.ObjectName}})
        return err
    }

// Get 根据id获取{{.StructName}}记录
// Author {{.Author}}
func (service *{{.StructName}}Service) Get(id string) (err error, {{.ObjectName}}View *view.{{.StructName}}View) {
    err1, {{.ObjectName}} := {{.ObjectName}}Dao.Get(id)
    if err1 != nil {
        return err1, nil
    }
    err2, {{.ObjectName}}View := viewUtils.Data2View({{.ObjectName}})
    if err2 != nil {
        return err2, nil
    }
        return
}

// List 分页获取{{.StructName}}记录
// Author {{.Author}}
func (service *{{.StructName}}Service) List(pageInfo *view.{{.StructName}}PageView) (err error, res *common.PageInfo) {
    err, param, page := viewUtils.Page2Data(pageInfo)
    if err != nil {
        return err, nil
    }
    err1, datas, total := {{.ObjectName}}Dao.List(param, page)
    if err1 != nil {
        return err1, res
    }
    err2, viewList := viewUtils.Data2ViewList(datas)
    if err2 != nil {
        return err2, res
    }
    res = &common.PageInfo{
        Total: total,
        Rows:  viewList,
    }
    return err, res
}