<template>
    <div>
        <div class="gva-search-box">
            <el-form :inline="true" :model="searchInfo" class="demo-form-inline">
                <el-form-item label="主键">
                    <el-input v-model="searchInfo.id" placeholder="搜索条件"/>
                </el-form-item>
                <el-form-item>
                    <el-button size="small" type="primary" icon="search" @click="onSubmit">查询</el-button>
                    <el-button size="small" icon="refresh" @click="onReset">重置</el-button>
                </el-form-item>
            </el-form>
        </div>
        <div class="gva-table-box">
            <div class="gva-btn-list">
                <el-button size="small" type="primary" icon="plus" @click="openAddForm">新增</el-button>
                <el-popover v-model:visible="deleteVisible" placement="top" width="160">
                    <p>确定要删除吗？</p>
                    <div style="text-align: right; margin-top: 8px;">
                        <el-button size="small" type="text" @click="deleteVisible = false">取消</el-button>
                        <el-button size="small" type="primary" @click="onDelete">确定</el-button>
                    </div>
                    <template #reference>
                        <el-button icon="delete" size="small" style="margin-left: 10px;"
                                   :disabled="!multipleSelection.length" @click="deleteVisible = true">删除
                        </el-button>
                    </template>
                </el-popover>
            </div>
            <el-table
                    ref="multipleTable"
                    style="width: 100%"
                    tooltip-effect="dark"
                    :data="tableData"
                    row-key="id"
                    @selection-change="handleSelectionChange">
                <el-table-column type="selection" width="55"/>
                {{range .Table.Columns}}
                <el-table-column text-align="left" label="{{.Name}}" prop="{{.JsonField}}" v-if="false"/>
                {{end}}
                <el-table-column align="left" label="按钮组">
                    <template #default="scope">
                        <el-button type="text" icon="edit" size="small" class="table-button"
                                   @click="update{{printf "%s" .StructName}}Func(scope.row)">变更
                        </el-button>
                        <el-button type="text" icon="edit" size="small" class="table-button"
                                   @click="get{{printf "%s" .StructName}}Func(scope.row)">明细
                        </el-button>
                        <el-button type="text" icon="delete" size="small" @click="deleteRow(scope.row)">删除</el-button>
                    </template>
                </el-table-column>
            </el-table>
            <div class="gva-pagination">
                <el-pagination
                        layout="total, sizes, prev, pager, next, jumper"
                        :current-page="page"
                        :page-size="pageSize"
                        :page-sizes="[10, 30, 50, 100]"
                        :total="total"
                        @current-change="handleCurrentChange"
                        @size-change="handleSizeChange"
                />
            </div>
        </div>
        <{{printf "%s" .ObjectName}}Add v-model:visible="{{printf "%s" .ObjectName}}AddShow" title="增加弹出框"/>
        <{{printf "%s" .ObjectName}}Update v-model:visible="{{printf "%s" .ObjectName}}UpdateShow" :{{printf "%s" .ObjectName}}UpdateContent="{{printf "%s" .ObjectName}}UpdateContent" title="修改弹出框"/>
        <{{printf "%s" .ObjectName}}Detail v-model:visible="{{printf "%s" .ObjectName}}DetailShow" :{{printf "%s" .ObjectName}}DetailContent="{{printf "%s" .ObjectName}}DetailContent" title="明细弹出框"/>
    </div>
</template>
<script setup>
    import { delete{{printf "%s" .StructName}}, delete{{printf "%s" .StructName}}ByIds, find{{printf "%s" .StructName}}List, get{{printf "%s" .StructName}} } from '@/api/{{.ModuleName}}/{{printf "%s" .FileName}}'
    // 全量引入格式化工具 请按需保留
    import { ElMessage, ElMessageBox } from 'element-plus'
    import { ref } from 'vue'

    // 自动化生成的字典（可能为空）以及字段
    const formData = ref({
        id: '',
        helloName: '',
        createTime: new Date(),
        updateTime: new Date(),
        remark: '',
    })

    // =========== 表格控制部分 ===========
    const page = ref(1)
    const total = ref(0)
    const pageSize = ref(10)
    const tableData = ref([])
    const searchInfo = ref({})
    // 弹窗控制标记
    const showAddForm = ref(false)
    // 重置
    const onReset = () => {
        searchInfo.value = {}
    }

    // 搜索
    const onSubmit = () => {
        page.value = 1
        pageSize.value = 10
        getTableData()
    }

    // 分页
    const handleSizeChange = (val) => {
        pageSize.value = val
        getTableData()
    }

    // 修改页面容量
    const handleCurrentChange = (val) => {
        page.value = val
        getTableData()
    }

    // 查询
    const getTableData = async() => {
        const table = await find{{printf "%s" .StructName}}List({ page: page.value, pageSize: pageSize.value, ...searchInfo.value })
        if (table.code === 0) {
            tableData.value = table.data.formList
            total.value = table.data.total
            page.value = table.data.page
            pageSize.value = table.data.pageSize
        }
    }

    getTableData()

    // ============== 表格控制部分结束 ===============

    // 获取需要的字典 可能为空 按需保留
    const setOptions = async() => {
    }

    // 获取需要的字典 可能为空 按需保留
    setOptions()

    // 多选数据
    const multipleSelection = ref([])
    // 多选
    const handleSelectionChange = (val) => {
        multipleSelection.value = val
    }

    // 删除行
    const deleteRow = (row) => {
        ElMessageBox.confirm('确定要删除吗?', '提示', {
            confirmButtonText: '确定',
            cancelButtonText: '取消',
            type: 'warning',
        }).then(() => {
            delete{{printf "%s" .StructName}}Func(row)
        })
    }

    // 批量删除控制标记
    const deleteVisible = ref(false)

    // 多选删除
    const onDelete = async() => {
        const ids = []
        if (multipleSelection.value.length === 0) {
            ElMessage({
                type: 'warning',
                message: '请选择要删除的数据',
            })
            return
        }
        multipleSelection.value &&
        multipleSelection.value.map(item => {
            ids.push(item.id)
        })
        const res = await delete{{printf "%s" .StructName}}ByIds({ ids })
        if (res.code === 0) {
            ElMessage({
                type: 'success',
                message: '删除成功',
            })
            if (tableData.value.length === ids.length && page.value > 1) {
                page.value--
            }
            deleteVisible.value = false
            getTableData()
        }
    }

    // 删除行
    const delete{{printf "%s" .StructName}}Func = async(row) => {
        const res = await delete{{printf "%s" .StructName}}({ id: row.id })
        if (res.code === 0) {
            ElMessage({
                type: 'success',
                message: '删除成功',
            })
            if (tableData.value.length === 1 && page.value > 1) {
                page.value--
            }
            getTableData()
        }
    }

</script>

<script>
    import {{printf "%s" .ObjectName}}Add from './{{printf "%s" .FileName}}_add.vue'
    import {{printf "%s" .ObjectName}}Update from './{{printf "%s" .FileName}}_update.vue'
    import {{printf "%s" .ObjectName}}Detail from './{{printf "%s" .FileName}}_detail.vue'
    import { defineComponent } from 'vue'

    const {{printf "%s" .ObjectName}}AddShow = ref(false)
    const openAddForm = function(status) {
        {{printf "%s" .ObjectName}}AddShow.value = true
    }
    const {{printf "%s" .ObjectName}}UpdateShow = ref(false)
    const {{printf "%s" .ObjectName}}UpdateContent = ref({})

    // 更新行
    const update{{printf "%s" .StructName}}Func = async(row) => {
        const params = {
            id: row.id,
        }
        const res = await get{{printf "%s" .StructName}}(params)
        if (res.code === 0) {
            {{printf "%s" .ObjectName}}UpdateShow.value = true
            {{printf "%s" .ObjectName}}UpdateContent.value = res.data.{{printf "%s" .ObjectName}}View
            // showAddForm.value = true
        }
    }

    const {{printf "%s" .ObjectName}}DetailShow = ref(false)
    const {{printf "%s" .ObjectName}}DetailContent = ref({})
    const get{{printf "%s" .StructName}}Func = async(row) => {
        const params = {
            id: row.id,
        }
        const res = await get{{printf "%s" .StructName}}(params)
        if (res.code === 0) {
            {{printf "%s" .ObjectName}}DetailShow.value = true
            {{printf "%s" .ObjectName}}DetailContent.value = res.data.{{printf "%s" .ObjectName}}View
        }
    }

    export default defineComponent({
        name: '{{printf "%s" .ObjectName}}',
        components: {
            {{printf "%s" .ObjectName}}Add,
            {{printf "%s" .ObjectName}}Update,
            {{printf "%s" .ObjectName}}Detail,
        },
        methods: {},
    })
</script>
<style>
</style>
