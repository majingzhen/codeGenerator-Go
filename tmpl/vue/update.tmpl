<template>
    <div>
        <el-dialog :model-value="visible" :before-close="handleClose" :title="name">
            <el-form :model="formData" label-position="right" label-width="80px">
                {{range .Table.Columns}}
                <el-form-item label="{{.Name}}:"{{if eq .JsonField "id"}} style="display: none"{{end}}>
                {{if .IsTime}}<el-date-picker v-model="formData.{{.JsonField}}" type="date" style="width:100%" placeholder="请选择{{.Name}}"/>
                {{else}}<el-input v-model="formData.{{.JsonField}}" clearable placeholder="请输入{{.Name}}"/>
                {{end}}</el-form-item>{{end}}
            </el-form>
            <template #footer>
                <div class="dialog-footer">
                    <el-button size="small" @click="this.handleClose">取 消</el-button>
                    <el-button size="small" type="primary" @click="enterDialog">确 定</el-button>
                </div>
            </template>
        </el-dialog>
    </div>
</template>

<script>
    import { update{{printf "%s" .StructName}} } from '@/api/{{.ModuleName}}/{{printf "%s" .FileName}}'
    import { ElMessage } from 'element-plus'
    import { defineComponent, ref } from 'vue'

    const formData = ref({
        {{range .Table.Columns}}
        {{.JsonField}}: '',{{end}}
    })
    export default defineComponent({
        name: '{{printf "%s" .ObjectName}}Update',
        props: {
            visible: Boolean, // 更新了<{{printf "%s" .ObjectName}}Add v-model:visible
            {{printf "%s" .ObjectName}}UpdateContent: Object,
        },
        watch: {
            'visible': function(newV, oldV) {
                if (newV) {
                    // console.log(this.{{printf "%s" .ObjectName}}Update)
                    const value = this.{{printf "%s" .ObjectName}}UpdateContent
                    formData.value = {
                        {{range .Table.Columns}}
                        {{.JsonField}}: value.{{.JsonField}},{{end}}
                    }
                }
            },
        },
        methods: {
            init() {
            },
        },
        setup(props, context) {
            const handleClose = function() {
                formData.value = {
                    {{range .Table.Columns}}
                    {{.JsonField}}: '',{{end}}
                }
                context.emit('update:visible', false)
            }

            // 弹窗确定
            const enterDialog = async() => {
                let res = await update{{printf "%s" .StructName}}(formData.value)
                if (res.code === 0) {
                    ElMessage({
                        type: 'success',
                        message: '创建/更改成功',
                    })
                    handleClose()
                    // 简单粗暴，直接刷新页面，不在更新table了，麻烦
                    location.reload()
                }
            }

            return { handleClose, enterDialog, formData }
        },
    })
</script>
